/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_hexdump.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ncheong <ncheong@student.42singapore.sg>   +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/07/05 18:23:08 by ncheong           #+#    #+#             */
/*   Updated: 2023/07/05 22:19:55 by ncheong          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft.h"

// ft_tail mimics tail command
// only to be invoked with -C option
// With no FILE, or when FILE is -, read standard input

void	output_error(int err, char *filename)
{
	if (!err)
		return ;
	write(2, "hexdump: ", 9);
	write(2, filename, ft_strlen(filename));
	write(2, ": ", 2);
	write(2, strerror(err), ft_strlen(strerror(err)));
	write(2, "\n", 1);
}

void	print_error(char *err_desc, char *err_arg)
{
	write(2, "hexdump: ", 9);
	write(2, err_desc, ft_strlen(err_desc));
	write(2, ": ", 2);
	write(2, err_arg, ft_strlen(err_arg));
	write(2, "\n", 1);
}

// returns number of bytes to read if valid
int	check_args(int argc, char **argv)
{
	if (argc < 3)
	{
		print_error("invalid number of arguments", "");
		return (0);
	}
	if (ft_strcmp(argv[1], "-C") != 0)
	{
		print_error("invalid option", argv[1]);
		return (0);
	}
	return (1);
}

int	file_size(char *filename)
{
	int		i;
	int		fd;
	char	c;

	fd = open(filename, O_RDONLY);
	if (fd < 0)
		return (0);
	i = 0;
	while (read(fd, &c, 1))
		i++;
	close(fd);
	return (i);
}

char	*create_buffer(int argc, char **argv)
{
	int		i;
	int		size;
	char	*buffer;

	i = 2;
	size = 0;
	while (i < argc)
	{
		size += file_size(argv[i]);
		i++;
	}
	buffer = (char *)malloc(size);
	return (buffer);
}

void	print_hex_addr(int buf_pos)
{
	int		i;
	char	buffer[10];

	i = 0;
	while (i < 8)
	{
		buffer[i] = \
		"0123456789abcdef"[(buf_pos >> (7 - i) * 4) & 0xf];
		i++;
	}
	buffer[i] = ' ';
	buffer[i + 1] = ' ';
	write(1, buffer, 10);
}

void	print_hex_contents(char *buffer, unsigned int count)
{
	unsigned int	i;
	unsigned char	*to_print;

	i = 0;
	while (i < count)
	{
		to_print = (unsigned char *)(buffer + i);
		write(1, &"0123456789abcdef"[*to_print / 16], 1);
		write(1, &"0123456789abcdef"[*to_print % 16], 1);
		write(1, " ", 1);
		i++;
		if ((i % 8) == 0)
			write(1, " ", 1);
	}
	while (i < 16)
	{
		write(1, "   ", 3);
		i++;
		if ((i % 8) == 0)
			write(1, " ", 1);
	}
}

void	print_char_contents(char *buffer, unsigned int count)
{
	unsigned int	i;
	unsigned char	*to_print;

	i = 0;
	write(1, "|", 1);
	while (i < count)
	{
		to_print = (unsigned char *)(buffer + i);
		if (*to_print >= 32 && *to_print <= 126)
			write(1, buffer + i, 1);
		else
			write(1, ".", 1);
		i++;
	}
	write(1, "|", 1);
	write(1, "\n", 1);
}

void	print_and_advance(char *buffer, int bytes_read, int *buf_pos)
{
	print_hex_addr(*buf_pos);
	print_hex_contents(buffer + (*buf_pos), bytes_read);
	print_char_contents(buffer + (*buf_pos), bytes_read);
	*buf_pos += bytes_read;
}

void	print_last_lines(char *buffer, int bytes_read, int *buf_pos)
{
	if (bytes_read)
		print_and_advance(buffer, bytes_read, buf_pos);
	print_hex_addr(*buf_pos);
	write(1, "\n", 1);
}

void	hexdump(int argc, char **argv, char *buffer)
{
	int	i;
	int	fd;
	int	b_read;
	int	b_pos;

	i = 1;
	b_pos = 0;
	b_read = 0;
	while (++i < argc)
	{
		fd = open(argv[i], O_RDONLY);
		if (fd < 0)
			output_error(errno, argv[i]);
		else
		{
			b_read += read(fd, buffer + b_pos + b_read, 16 - b_read);
			while (b_read == 16)
			{
				print_and_advance(buffer, b_read, &b_pos);
				b_read = read(fd, buffer + b_pos, 16);
			}
		}
		close(fd);
	}
	print_last_lines(buffer, bytes_read, &buf_pos);
}

int	main(int argc, char **argv)
{
	int		i;
	char	*buffer;

	if (!check_args(argc, argv))
		return (0);
	buffer = create_buffer(argc, argv);
	if (!buffer)
		return (0);
	hexdump(argc, argv, buffer);
	return (0);
}
